// Code generated by MockGen. DO NOT EDIT.
// Source: core/domain/free_market.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/booscaaa/go-api-test-unico/core/domain"
	dto "github.com/booscaaa/go-api-test-unico/core/dto"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockFreeMarketHTTPService is a mock of FreeMarketHTTPService interface.
type MockFreeMarketHTTPService struct {
	ctrl     *gomock.Controller
	recorder *MockFreeMarketHTTPServiceMockRecorder
}

// MockFreeMarketHTTPServiceMockRecorder is the mock recorder for MockFreeMarketHTTPService.
type MockFreeMarketHTTPServiceMockRecorder struct {
	mock *MockFreeMarketHTTPService
}

// NewMockFreeMarketHTTPService creates a new mock instance.
func NewMockFreeMarketHTTPService(ctrl *gomock.Controller) *MockFreeMarketHTTPService {
	mock := &MockFreeMarketHTTPService{ctrl: ctrl}
	mock.recorder = &MockFreeMarketHTTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreeMarketHTTPService) EXPECT() *MockFreeMarketHTTPServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFreeMarketHTTPService) Create(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0)
}

// Create indicates an expected call of Create.
func (mr *MockFreeMarketHTTPServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFreeMarketHTTPService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockFreeMarketHTTPService) Delete(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockFreeMarketHTTPServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFreeMarketHTTPService)(nil).Delete), arg0)
}

// Fetch mocks base method.
func (m *MockFreeMarketHTTPService) Fetch(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fetch", arg0)
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFreeMarketHTTPServiceMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFreeMarketHTTPService)(nil).Fetch), arg0)
}

// GetByID mocks base method.
func (m *MockFreeMarketHTTPService) GetByID(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetByID", arg0)
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFreeMarketHTTPServiceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFreeMarketHTTPService)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockFreeMarketHTTPService) Update(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockFreeMarketHTTPServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFreeMarketHTTPService)(nil).Update), arg0)
}

// MockFreeMarketUseCase is a mock of FreeMarketUseCase interface.
type MockFreeMarketUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFreeMarketUseCaseMockRecorder
}

// MockFreeMarketUseCaseMockRecorder is the mock recorder for MockFreeMarketUseCase.
type MockFreeMarketUseCaseMockRecorder struct {
	mock *MockFreeMarketUseCase
}

// NewMockFreeMarketUseCase creates a new mock instance.
func NewMockFreeMarketUseCase(ctrl *gomock.Controller) *MockFreeMarketUseCase {
	mock := &MockFreeMarketUseCase{ctrl: ctrl}
	mock.recorder = &MockFreeMarketUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreeMarketUseCase) EXPECT() *MockFreeMarketUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFreeMarketUseCase) Create(arg0 context.Context, arg1 *dto.FreeMarketRequestBody) (*domain.FreeMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.FreeMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFreeMarketUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFreeMarketUseCase)(nil).Create), arg0, arg1)
}

// MockFreeMarketRepository is a mock of FreeMarketRepository interface.
type MockFreeMarketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFreeMarketRepositoryMockRecorder
}

// MockFreeMarketRepositoryMockRecorder is the mock recorder for MockFreeMarketRepository.
type MockFreeMarketRepositoryMockRecorder struct {
	mock *MockFreeMarketRepository
}

// NewMockFreeMarketRepository creates a new mock instance.
func NewMockFreeMarketRepository(ctrl *gomock.Controller) *MockFreeMarketRepository {
	mock := &MockFreeMarketRepository{ctrl: ctrl}
	mock.recorder = &MockFreeMarketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreeMarketRepository) EXPECT() *MockFreeMarketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFreeMarketRepository) Create(arg0 context.Context, arg1 *dto.FreeMarketRequestBody) (*domain.FreeMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.FreeMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFreeMarketRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFreeMarketRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFreeMarketRepository) Delete(arg0 context.Context, arg1 int64) (*domain.FreeMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*domain.FreeMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFreeMarketRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFreeMarketRepository)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method.
func (m *MockFreeMarketRepository) Fetch(arg0 context.Context, arg1 *dto.PaginationRequestParams) (*dto.PaginationResponseBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*dto.PaginationResponseBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFreeMarketRepositoryMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFreeMarketRepository)(nil).Fetch), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockFreeMarketRepository) GetByID(arg0 context.Context, arg1 int64) (*domain.FreeMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.FreeMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFreeMarketRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFreeMarketRepository)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockFreeMarketRepository) Update(arg0 context.Context, arg1 int64, arg2 *dto.FreeMarketRequestBody) (*domain.FreeMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.FreeMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFreeMarketRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFreeMarketRepository)(nil).Update), arg0, arg1, arg2)
}
